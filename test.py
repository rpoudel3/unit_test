import requester
import unittest
import pandas as pd
import os
import warnings
import csv




class TestURL(unittest.TestCase):
    os.getcwd()

    def test_valid_url(self):
        """ test to see if the url passed in is valid and can be parsed as CSV
        for url_to_csv function"""
        cwd=os.getcwd()
        url = "http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"
        returned_fname = requester.url_to_csv(url, fname="wine")
        self.assertIsInstance(returned_fname, str)
        self.assertEqual(returned_fname, "{0}/{1}.csv".format(cwd,'wine'))

    def test_invalid_url(self):
        """ test to see if the url passed in is invalid and will raise ValueError if it is invalid
        for url_to_csv function"""
        cwd=os.getcwd()
        invalid_url = "http://golakjsd.com/jl2kais"
        with self.assertRaises(ValueError):
            requester.url_to_csv(invalid_url,"{0}/{1}.csv".format(cwd,'test'))

    def test_valid_csv(self):
        """ test to see if the valid url has a valid csv
         for url_to_csv function"""
        url="http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"
        readerobject=requester.url_to_csv(url, fname='wine2')
        self.assertTrue(str(type(readerobject)),"_csv.reader")

    def test_invalid_csv(self):
        """ test to see if the valid url has an invalid csv and raises TypeError if it cannot be parsed as a CSV
        for url_to_csv function"""
        cwd=os.getcwd()
        url="http://stackoverflow.com/questions/17730173/python-cant-get-full-path-name-of-file"
        with self.assertRaises(TypeError):
            requester.url_to_csv(url,"{0}/{1}.csv".format(cwd,'tester'))


class Test_batch_URL_csv(unittest.TestCase):
    def test_valid_url(self):
        """Emits a runtime warning indicating that the invalid CSV URL or URL which cannot be accessed was skipped
        for batch_url_to_csv function"""

        cwd=os.getcwd()
        url = ["http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data",
                "http://stackoverflow.com/questions/17730173/python-cant-get-full-path-name-of-file",
               "http://archive.ics.uci.edu/ml/machine-learning-databases/forest-fires/forestfires.csv"]
        #with warnings.warn('RuntimeWarning'):
        #    requester.batch_url_to_csv(url, fnames=["test", "test2","test3"])
        returned_fname = requester.batch_url_to_csv(url, fnames=["test", "test2","test3"])
        self.assertEqual(returned_fname, ["{0}/{1}.csv".format(cwd,"test"),
                                           "{0}/{1}.csv".format(cwd,"test3")])

    def test_number_of_files(self):

        """Ensure that batch_url_to_csv( ) generates the same number of files as valid CSV URLs
        (taking into account URLs that might have been skipped due to being invalid or not CSVs)"""

        url = ["http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data",
                "http://golakjsd.com/jl2kais",
               "http://stackoverflow.com/questions/17730173/python-cant-get-full-path-name-of-file"]

        returned_fname=requester.batch_url_to_csv(url, fnames=["test_fname",
                                                                "test2_fname",
                                                                "test3_fname"])
        number_files=len(returned_fname)
        self.assertEqual(number_files, 1)

    def test_content_file(self):
        """Ensure that the contents of each file generated by batch_url_to_csv( )
         is different if different URLs are passed in"""

        url=["http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data",
             "http://archive.ics.uci.edu/ml/machine-learning-databases/car/car.data",
             "http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"]
        cwd=os.getcwd()
        list_of_files=requester.batch_url_to_csv(url, fnames=["m1", "m2","m3"])
        total_rows=0
        reader_list=[]
        for j in range(len(list_of_files)):
                reader=csv.DictReader(list_of_files[j])
        for rows in reader:
                total_rows+=1
        reader_list.append(total_rows)

        unique=set((reader_list))
        if len(unique)!=len(reader_list):
            with self.assertRaises(AssertionError):
                requester.batch_url_to_csv(url,fnames=['m1','m2','m3'])


    def test_correct_filenames(self):

        """Ensure that batch_url_to_csv( ) returns the correct filenames (i.e. when invalid CSV URLs are passed in)"""
        url = ["https://docs.travis-ci.com/user/languages/python",
                "https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer/breast-cancer-data",
               "http://google.com/student"]
        cwd=os.getcwd()
        returned_fname=requester.batch_url_to_csv(url,fnames=['t1',
                                                              't2',
                                                              't3'])
        self.assertEqual(returned_fname,['{0}/{1}.csv'.format(cwd,'t2')])

    def test_correct_number_of_filenames(self):
        """Ensure that batch_url_to_csv( ) returns the correct number of filenames (i.e. when invalid CSV URLs are passed in"""
        url = ["https://docs.travis-ci.com/user/languages/python",
                "https://github.com/pydata/pandas/issues/10153",
               "http://stackoverflow.com/questions/17730173/python-cant-get-full-path-name-of-file"]

        returned_fname=requester.batch_url_to_csv(url, fnames=["test_fname1",
                                                               "test2_fname2",
                                                               "test3_fname3"])
        number_files=len(returned_fname)
        self.assertEqual(number_files, 0)

    def test_duplicate_URLS(self):
        """If a user passes in duplicate URLs to batch_url_to_csv( ) then an AssertionError
        should be raised that says "Duplicate URLs cannot be present in the parameter 'urls'"""
        url = ["https://docs.travis-ci.com/user/languages/python",
                "https://github.com/pydata/pandas/issues/10153",
               "https://github.com/pydata/pandas/issues/10153"]
        with self.assertRaises(AssertionError):
            requester.batch_url_to_csv(url,fnames=['travis','travis2','travis3'])

class TestURL_df(unittest.TestCase):
    def test_dataframe(self):
        """Ensure url_to_df( ) returns a Pandas DataFrame object"""

        url="http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"
        readerobject=requester.url_to_df(url)
        self.assertIsInstance(readerobject,pd.DataFrame)

    def test_number_of_rows_without_header(self):
        """Ensure the number of rows in the Pandas DataFrame returned by url_to_df( ) matches
        the number of rows in the CSV when there is no header row in the CSV"""
        url="http://archive.ics.uci.edu/ml/machine-learning-databases/car/car.data"

        reader=requester.url_to_df(url)
        rows,columns=reader.shape
        self.assertEqual(rows,1728)

    def test_number_of_rows_with_header(self):
        """Ensure the number of rows in the Pandas DataFrame returned by url_to_df( ) matches
        the number of rows in the CSV when there is a header row in the CSV """
        url="http://archive.ics.uci.edu/ml/machine-learning-databases/forest-fires/forestfires.csv"

        reader=requester.url_to_df(url)
        rows,columns=reader.shape
        self.assertEqual(rows,517)









